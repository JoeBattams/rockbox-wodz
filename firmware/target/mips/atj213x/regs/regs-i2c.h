/***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * This file was automatically generated by headergen, DO NOT EDIT it.
 * headergen version: 2.1.8
 * XML versions: atj213x:1.0
 *
 * Copyright (C) 2015 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************/
#ifndef __HEADERGEN__ATJ213X__I2C__H__
#define __HEADERGEN__ATJ213X__I2C__H__
#include "regs-macro.h"

#define REGS_I2C_BASE(i) ((i) == 1 ? 0xb0180000 : 0xb0180020)

#define REGS_I2C_VERSION "1.0"

/**
 * Register: I2C_CTL
 * Address: 0
 * SCT: no
 */
#define I2C_CTL(d)                      (*(volatile unsigned long *)(REGS_I2C_BASE(d) + 0x0))
#define BP_I2C_CTL_RESERVED31_9         9
#define BM_I2C_CTL_RESERVED31_9         0xfffffe00
#define BF_I2C_CTL_RESERVED31_9(v)      (((v) << 9) & 0xfffffe00)
/* Field: PUEN
 * Description: nternal Pull-up Resistor (4.7k) Enable */
#define BP_I2C_CTL_PUEN                 8
#define BM_I2C_CTL_PUEN                 0x100
#define BF_I2C_CTL_PUEN(v)              (((v) << 8) & 0x100)
/* Field: EN
 * Description: Block enable */
#define BP_I2C_CTL_EN                   7
#define BM_I2C_CTL_EN                   0x80
#define BF_I2C_CTL_EN(v)                (((v) << 7) & 0x80)
/* Field: SIE
 * Description: START Condition Generates IRQ Enable (only for slave mode) */
#define BP_I2C_CTL_SIE                  6
#define BM_I2C_CTL_SIE                  0x40
#define BF_I2C_CTL_SIE(v)               (((v) << 6) & 0x40)
/* Field: IRQE
 * Description: IRQ Enable */
#define BP_I2C_CTL_IRQE                 5
#define BM_I2C_CTL_IRQE                 0x20
#define BF_I2C_CTL_IRQE(v)              (((v) << 5) & 0x20)
/* Field: MS
 * Description: Mode select */
#define BP_I2C_CTL_MS                   4
#define BM_I2C_CTL_MS                   0x10
#define BV_I2C_CTL_MS__MASTER           0x0
#define BV_I2C_CTL_MS__SLAVE            0x0
#define BF_I2C_CTL_MS(v)                (((v) << 4) & 0x10)
#define BF_I2C_CTL_MS_V(v)              ((BV_I2C_CTL_MS__##v << 4) & 0x10)
/* Field: GBCC
 * Description: Generating Bus Control Condition (only for master mode) */
#define BP_I2C_CTL_GBCC                 2
#define BM_I2C_CTL_GBCC                 0xc
#define BV_I2C_CTL_GBCC__NOP            0x0
#define BV_I2C_CTL_GBCC__START          0x1
#define BV_I2C_CTL_GBCC__STOP           0x2
#define BV_I2C_CTL_GBCC__REPEATED_START 0x3
#define BF_I2C_CTL_GBCC(v)              (((v) << 2) & 0xc)
#define BF_I2C_CTL_GBCC_V(v)            ((BV_I2C_CTL_GBCC__##v << 2) & 0xc)
/* Field: RB
 * Description: Release Bus. Writing 1 to this bit will release the clock and 
 * data line to idle. MCU should write 1 to this bit after transmitting or 
 * receiving the last bit ofthe whole transfer. */
#define BP_I2C_CTL_RB                   1
#define BM_I2C_CTL_RB                   0x2
#define BF_I2C_CTL_RB(v)                (((v) << 1) & 0x2)
/* Field: GRAS
 * Description: Generating/Receiving Acknowledge Signal */
#define BP_I2C_CTL_GRAS                 0
#define BM_I2C_CTL_GRAS                 0x1
#define BF_I2C_CTL_GRAS(v)              (((v) << 0) & 0x1)

/**
 * Register: I2C_CLKDIV
 * Address: 0x4
 * SCT: no
 */
#define I2C_CLKDIV(d)                   (*(volatile unsigned long *)(REGS_I2C_BASE(d) + 0x4))
#define BP_I2C_CLKDIV_RESERVED31_8      8
#define BM_I2C_CLKDIV_RESERVED31_8      0xffffff00
#define BF_I2C_CLKDIV_RESERVED31_8(v)   (((v) << 8) & 0xffffff00)
/* Field: CLKDIV
 * Description: Clock Divider Factor (only for master mode). I2Cx clock (SCL) 
 * can select standard (100kbps) mode and fast (400kbps) mode. Calculating SCL 
 * is as follows: SCL=PCLK/(CLKDIV*16) */
#define BP_I2C_CLKDIV_CLKDIV            0
#define BM_I2C_CLKDIV_CLKDIV            0xff
#define BF_I2C_CLKDIV_CLKDIV(v)         (((v) << 0) & 0xff)

/**
 * Register: I2C_STAT
 * Address: 0x8
 * SCT: no
 */
#define I2C_STAT(d)                 (*(volatile unsigned long *)(REGS_I2C_BASE(d) + 0x8))
#define BP_I2C_STAT_RESERVED31_8    8
#define BM_I2C_STAT_RESERVED31_8    0xffffff00
#define BF_I2C_STAT_RESERVED31_8(v) (((v) << 8) & 0xffffff00)
/* Field: TRC
 * Description: Transmit/Receive Complete Bit */
#define BP_I2C_STAT_TRC             7
#define BM_I2C_STAT_TRC             0x80
#define BF_I2C_STAT_TRC(v)          (((v) << 7) & 0x80)
/* Field: STPD
 * Description: STOP Detect Bit  */
#define BP_I2C_STAT_STPD            6
#define BM_I2C_STAT_STPD            0x40
#define BF_I2C_STAT_STPD(v)         (((v) << 6) & 0x40)
/* Field: STAD
 * Description: START Detect Bit */
#define BP_I2C_STAT_STAD            5
#define BM_I2C_STAT_STAD            0x20
#define BF_I2C_STAT_STAD(v)         (((v) << 5) & 0x20)
/* Field: RWST
 * Description: Read/Write Status Bit (only for Slave mode) */
#define BP_I2C_STAT_RWST            4
#define BM_I2C_STAT_RWST            0x10
#define BF_I2C_STAT_RWST(v)         (((v) << 4) & 0x10)
/* Field: LBST
 * Description: Last Byte Status Bit */
#define BP_I2C_STAT_LBST            3
#define BM_I2C_STAT_LBST            0x8
#define BF_I2C_STAT_LBST(v)         (((v) << 3) & 0x8)
/* Field: IRQP
 * Description: IRQ Pending Bit */
#define BP_I2C_STAT_IRQP            2
#define BM_I2C_STAT_IRQP            0x4
#define BF_I2C_STAT_IRQP(v)         (((v) << 2) & 0x4)
/* Field: OVST
 * Description: Overflow Status Bit */
#define BP_I2C_STAT_OVST            1
#define BM_I2C_STAT_OVST            0x2
#define BF_I2C_STAT_OVST(v)         (((v) << 1) & 0x2)
/* Field: WCO
 * Description: Writing Collision Bit */
#define BP_I2C_STAT_WCO             0
#define BM_I2C_STAT_WCO             0x1
#define BF_I2C_STAT_WCO(v)          (((v) << 0) & 0x1)

/**
 * Register: I2C_ADDR
 * Address: 0xc
 * SCT: no
 */
#define I2C_ADDR(d)                 (*(volatile unsigned long *)(REGS_I2C_BASE(d) + 0xc))
#define BP_I2C_ADDR_RESERVED31_8    8
#define BM_I2C_ADDR_RESERVED31_8    0xffffff00
#define BF_I2C_ADDR_RESERVED31_8(v) (((v) << 8) & 0xffffff00)
/* Field: SDAD
 * Description: Slave Device Address */
#define BP_I2C_ADDR_SDAD            1
#define BM_I2C_ADDR_SDAD            0xfe
#define BF_I2C_ADDR_SDAD(v)         (((v) << 1) & 0xfe)
/* Field: RWCM
 * Description: Read/Write Control or Match */
#define BP_I2C_ADDR_RWCM            0
#define BM_I2C_ADDR_RWCM            0x1
#define BF_I2C_ADDR_RWCM(v)         (((v) << 0) & 0x1)

/**
 * Register: I2C_DAT
 * Address: 0x10
 * SCT: no
 */
#define I2C_DAT(d)                  (*(volatile unsigned long *)(REGS_I2C_BASE(d) + 0x10))
#define BP_I2C_DAT_RESERVED31_8     8
#define BM_I2C_DAT_RESERVED31_8     0xffffff00
#define BF_I2C_DAT_RESERVED31_8(v)  (((v) << 8) & 0xffffff00)
/* Field: TXRXDAT
 * Description: Transmit/Receive Data */
#define BP_I2C_DAT_TXRXDAT          0
#define BM_I2C_DAT_TXRXDAT          0xff
#define BF_I2C_DAT_TXRXDAT(v)       (((v) << 0) & 0xff)

#endif /* __HEADERGEN__ATJ213X__I2C__H__ */
