/***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * This file was automatically generated by headergen, DO NOT EDIT it.
 * headergen version: 2.1.8
 * XML versions: atj213x:1.0
 *
 * Copyright (C) 2015 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************/
#ifndef __HEADERGEN__ATJ213X__UDC__H__
#define __HEADERGEN__ATJ213X__UDC__H__
#include "regs-macro.h"

#define REGS_UDC_BASE (0xb00e0000)

#define REGS_UDC_VERSION "1.0"

/**
 * Register: UDC_EP0BC
 * Address: 0 0x1
 * SCT: no
 * Description: ep0 byte count register
 */
#define UDC_OUT0BC                  (*(volatile unsigned char *)(REGS_UDC_BASE + 0x0))
#define UDC_IN0BC                   (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1))
#define BP_UDC_EP0BC_RESERVED       8
#define BM_UDC_EP0BC_RESERVED       0xffffff00
#define BF_UDC_EP0BC_RESERVED(v)    (((v) << 8) & 0xffffff00)
#define BP_UDC_EP0BC_BC             0
#define BM_UDC_EP0BC_BC             0xff
#define BF_UDC_EP0BC_BC(v)          (((v) << 0) & 0xff)

/**
 * Register: UDC_EP0CS
 * Address: 0x2
 * SCT: no
 */
#define UDC_EP0CS                   (*(volatile unsigned char *)(REGS_UDC_BASE + 0x2))
#define BP_UDC_EP0CS_RESERVED       8
#define BM_UDC_EP0CS_RESERVED       0xffffff00
#define BF_UDC_EP0CS_RESERVED(v)    (((v) << 8) & 0xffffff00)
#define BP_UDC_EP0CS_OUT_BUSY       3
#define BM_UDC_EP0CS_OUT_BUSY       0x8
#define BF_UDC_EP0CS_OUT_BUSY(v)    (((v) << 3) & 0x8)
#define BP_UDC_EP0CS_IN_BUSY        2
#define BM_UDC_EP0CS_IN_BUSY        0x4
#define BF_UDC_EP0CS_IN_BUSY(v)     (((v) << 2) & 0x4)
/* Field: NAK
 * Description: Writing 1 clears */
#define BP_UDC_EP0CS_NAK            1
#define BM_UDC_EP0CS_NAK            0x2
#define BF_UDC_EP0CS_NAK(v)         (((v) << 1) & 0x2)
#define BP_UDC_EP0CS_STALL          0
#define BM_UDC_EP0CS_STALL          0x1
#define BF_UDC_EP0CS_STALL(v)       (((v) << 0) & 0x1)

/**
 * Register: UDC_BCL
 * Address: 0x8 0xc 0x10 0x14
 * SCT: no
 * Description: Endpoint byte count LSB register
 */
#define UDC_OUT1BCL (*(volatile unsigned char *)(REGS_UDC_BASE + 0x8))
#define UDC_IN1BCL  (*(volatile unsigned char *)(REGS_UDC_BASE + 0xc))
#define UDC_OUT2BCL (*(volatile unsigned char *)(REGS_UDC_BASE + 0x10))
#define UDC_IN2BCL  (*(volatile unsigned char *)(REGS_UDC_BASE + 0x14))

/**
 * Register: UDC_BCH
 * Address: 0x9 0xd 0x11 0x15
 * SCT: no
 * Description: Endpoint byte count MSB
 */
#define UDC_OUT1BCH (*(volatile unsigned char *)(REGS_UDC_BASE + 0x9))
#define UDC_IN1BCH  (*(volatile unsigned char *)(REGS_UDC_BASE + 0xd))
#define UDC_OUT2BCH (*(volatile unsigned char *)(REGS_UDC_BASE + 0x11))
#define UDC_IN2BCH  (*(volatile unsigned char *)(REGS_UDC_BASE + 0x15))

/**
 * Register: UDC_CON
 * Address: 0xa 0xe 0x12 0x16
 * SCT: no
 * Description: Endpoint configuration register
 */
#define UDC_OUT1CON                     (*(volatile unsigned char *)(REGS_UDC_BASE + 0xa))
#define UDC_IN1CON                      (*(volatile unsigned char *)(REGS_UDC_BASE + 0xe))
#define UDC_OUT2CON                     (*(volatile unsigned char *)(REGS_UDC_BASE + 0x12))
#define UDC_IN2CON                      (*(volatile unsigned char *)(REGS_UDC_BASE + 0x16))
#define BP_UDC_CON_EP_ENABLE            7
#define BM_UDC_CON_EP_ENABLE            0x80
#define BF_UDC_CON_EP_ENABLE(v)         (((v) << 7) & 0x80)
#define BP_UDC_CON_STALL                6
#define BM_UDC_CON_STALL                0x40
#define BF_UDC_CON_STALL(v)             (((v) << 6) & 0x40)
#define BP_UDC_CON_EP_TYPE              2
#define BM_UDC_CON_EP_TYPE              0xc
#define BV_UDC_CON_EP_TYPE__RESERVED    0x0
#define BV_UDC_CON_EP_TYPE__ISOCHRONOUS 0x1
#define BV_UDC_CON_EP_TYPE__BULK        0x2
#define BV_UDC_CON_EP_TYPE__INTERRUPT   0x3
#define BF_UDC_CON_EP_TYPE(v)           (((v) << 2) & 0xc)
#define BF_UDC_CON_EP_TYPE_V(v)         ((BV_UDC_CON_EP_TYPE__##v << 2) & 0xc)
#define BP_UDC_CON_SUBFIFOS             0
#define BM_UDC_CON_SUBFIFOS             0x3
#define BV_UDC_CON_SUBFIFOS__SINGLE     0x0
#define BV_UDC_CON_SUBFIFOS__DOUBLE     0x1
#define BV_UDC_CON_SUBFIFOS__TRIPLE     0x2
#define BV_UDC_CON_SUBFIFOS__QUAD       0x3
#define BF_UDC_CON_SUBFIFOS(v)          (((v) << 0) & 0x3)
#define BF_UDC_CON_SUBFIFOS_V(v)        ((BV_UDC_CON_SUBFIFOS__##v << 0) & 0x3)

/**
 * Register: UDC_CS
 * Address: 0xb 0xf 0x13 0x17
 * SCT: no
 * Description: Endpoint status register
 */
#define UDC_OUT1CS          (*(volatile unsigned char *)(REGS_UDC_BASE + 0xb))
#define UDC_IN1CS           (*(volatile unsigned char *)(REGS_UDC_BASE + 0xf))
#define UDC_OUT2CS          (*(volatile unsigned char *)(REGS_UDC_BASE + 0x13))
#define UDC_IN2CS           (*(volatile unsigned char *)(REGS_UDC_BASE + 0x17))
#define BP_UDC_CS_AUTO      4
#define BM_UDC_CS_AUTO      0x10
#define BF_UDC_CS_AUTO(v)   (((v) << 4) & 0x10)
#define BP_UDC_CS_NPACK1    3
#define BM_UDC_CS_NPACK1    0x8
#define BF_UDC_CS_NPACK1(v) (((v) << 3) & 0x8)
#define BP_UDC_CS_NPACK0    2
#define BM_UDC_CS_NPACK0    0x4
#define BF_UDC_CS_NPACK0(v) (((v) << 2) & 0x4)
#define BP_UDC_CS_BUSY      1
#define BM_UDC_CS_BUSY      0x2
#define BF_UDC_CS_BUSY(v)   (((v) << 1) & 0x2)
#define BP_UDC_CS_ERROR     0
#define BM_UDC_CS_ERROR     0x1
#define BF_UDC_CS_ERROR(v)  (((v) << 0) & 0x1)

/**
 * Register: UDC_FIFODAT
 * Address: 0x84 0x88
 * SCT: no
 * Description: Endpoint FIFO
 */
#define UDC_FIFO1DAT    (*(volatile unsigned long *)(REGS_UDC_BASE + 0x84))
#define UDC_FIFO2DAT    (*(volatile unsigned long *)(REGS_UDC_BASE + 0x88))

/**
 * Register: UDC_EP0DAT
 * Address: 0x100 0x140
 * SCT: no
 * Description: Endpoint 0 buffers each 64 bytes long.
 */
#define UDC_EP0INDAT    (*(volatile unsigned long *)(REGS_UDC_BASE + 0x100))
#define UDC_EP0OUTDAT   (*(volatile unsigned long *)(REGS_UDC_BASE + 0x140))

/**
 * Register: UDC_SETUPDAT
 * Address: 0x180
 * SCT: no
 * Description: SETUP packet buffer
 */
#define UDC_SETUPDAT    (*(volatile unsigned long *)(REGS_UDC_BASE + 0x180))

/**
 * Register: UDC_EPIRQ
 * Address: 0x188 0x18a
 * SCT: no
 * Description: Endpoint irq flag register
 */
#define UDC_IN04IRQ             (*(volatile unsigned char *)(REGS_UDC_BASE + 0x188))
#define UDC_OUT04IRQ            (*(volatile unsigned char *)(REGS_UDC_BASE + 0x18a))
#define BP_UDC_EPIRQ_EP_NUM     0
#define BM_UDC_EPIRQ_EP_NUM     0x7
#define BF_UDC_EPIRQ_EP_NUM(v)  (((v) << 0) & 0x7)

/**
 * Register: UDC_USBIRQ
 * Address: 0x18c
 * SCT: no
 * Description: General usb core irq flags
 */
#define UDC_USBIRQ                      (*(volatile unsigned char *)(REGS_UDC_BASE + 0x18c))
/* Field: HS
 * Description: Enter high speed operation. Set by core on connection. */
#define BP_UDC_USBIRQ_HS                5
#define BM_UDC_USBIRQ_HS                0x20
#define BF_UDC_USBIRQ_HS(v)             (((v) << 5) & 0x20)
/* Field: RESET
 * Description: Asserted on usb reset. */
#define BP_UDC_USBIRQ_RESET             4
#define BM_UDC_USBIRQ_RESET             0x10
#define BF_UDC_USBIRQ_RESET(v)          (((v) << 4) & 0x10)
#define BP_UDC_USBIRQ_SUSPEND           3
#define BM_UDC_USBIRQ_SUSPEND           0x8
#define BF_UDC_USBIRQ_SUSPEND(v)        (((v) << 3) & 0x8)
#define BP_UDC_USBIRQ_SETUP_TOKEN       2
#define BM_UDC_USBIRQ_SETUP_TOKEN       0x4
#define BF_UDC_USBIRQ_SETUP_TOKEN(v)    (((v) << 2) & 0x4)
#define BP_UDC_USBIRQ_SOF               1
#define BM_UDC_USBIRQ_SOF               0x2
#define BF_UDC_USBIRQ_SOF(v)            (((v) << 1) & 0x2)
/* Field: SETUP_DATA
 * Description: Setup data are ready to be accessed in SETUPDAT buffer. */
#define BP_UDC_USBIRQ_SETUP_DATA        0
#define BM_UDC_USBIRQ_SETUP_DATA        0x1
#define BF_UDC_USBIRQ_SETUP_DATA(v)     (((v) << 0) & 0x1)

/**
 * Register: UDC_EPIEN
 * Address: 0x194 0x196
 * SCT: no
 * Description: Endpoint interrupt enable register
 */
#define UDC_IN04IEN             (*(volatile unsigned char *)(REGS_UDC_BASE + 0x194))
#define UDC_OUT04IEN            (*(volatile unsigned char *)(REGS_UDC_BASE + 0x196))
#define BP_UDC_EPIEN_EP_NUM     0
#define BM_UDC_EPIEN_EP_NUM     0x7
#define BF_UDC_EPIEN_EP_NUM(v)  (((v) << 0) & 0x7)

/**
 * Register: UDC_USBIEN
 * Address: 0x198
 * SCT: no
 * Description: General usb interrupts enable register
 */
#define UDC_USBIEN                      (*(volatile unsigned char *)(REGS_UDC_BASE + 0x198))
#define BP_UDC_USBIEN_HS                5
#define BM_UDC_USBIEN_HS                0x20
#define BF_UDC_USBIEN_HS(v)             (((v) << 5) & 0x20)
#define BP_UDC_USBIEN_RESET             4
#define BM_UDC_USBIEN_RESET             0x10
#define BF_UDC_USBIEN_RESET(v)          (((v) << 4) & 0x10)
#define BP_UDC_USBIEN_SUSPEND           3
#define BM_UDC_USBIEN_SUSPEND           0x8
#define BF_UDC_USBIEN_SUSPEND(v)        (((v) << 3) & 0x8)
#define BP_UDC_USBIEN_SETUP_TOKEN       2
#define BM_UDC_USBIEN_SETUP_TOKEN       0x4
#define BF_UDC_USBIEN_SETUP_TOKEN(v)    (((v) << 2) & 0x4)
#define BP_UDC_USBIEN_SOF               1
#define BM_UDC_USBIEN_SOF               0x2
#define BF_UDC_USBIEN_SOF(v)            (((v) << 1) & 0x2)
#define BP_UDC_USBIEN_SETUP_DATA        0
#define BM_UDC_USBIEN_SETUP_DATA        0x1
#define BF_UDC_USBIEN_SETUP_DATA(v)     (((v) << 0) & 0x1)

/**
 * Register: UDC_IVECT
 * Address: 0x1a0
 * SCT: no
 * Description: Interrupt vector registerknown (guessed) values:0x00 - SETUP0x10
 *  - RESET0x14 - HS0x28 - EPs0xD8 - OTG
 */
#define UDC_IVECT   (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1a0))

/**
 * Register: UDC_ENDPRST
 * Address: 0x1a2
 * SCT: no
 * Description: Endpoint reset register
 */
#define UDC_ENDPRST                     (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1a2))
#define BP_UDC_ENDPRST_FIFO_RESET       6
#define BM_UDC_ENDPRST_FIFO_RESET       0x40
#define BF_UDC_ENDPRST_FIFO_RESET(v)    (((v) << 6) & 0x40)
#define BP_UDC_ENDPRST_TOGGLE_RESET     5
#define BM_UDC_ENDPRST_TOGGLE_RESET     0x20
#define BF_UDC_ENDPRST_TOGGLE_RESET(v)  (((v) << 5) & 0x20)
#define BP_UDC_ENDPRST_DIR              4
#define BM_UDC_ENDPRST_DIR              0x10
#define BV_UDC_ENDPRST_DIR__OUT         0x0
#define BV_UDC_ENDPRST_DIR__IN          0x1
#define BF_UDC_ENDPRST_DIR(v)           (((v) << 4) & 0x10)
#define BF_UDC_ENDPRST_DIR_V(v)         ((BV_UDC_ENDPRST_DIR__##v << 4) & 0x10)
#define BP_UDC_ENDPRST_EP_NUM           0
#define BM_UDC_ENDPRST_EP_NUM           0x7
#define BF_UDC_ENDPRST_EP_NUM(v)        (((v) << 0) & 0x7)

/**
 * Register: UDC_USBCS
 * Address: 0x1a3
 * SCT: no
 */
#define UDC_USBCS                       (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1a3))
#define BP_UDC_USBCS_SOFT_CONNECT       6
#define BM_UDC_USBCS_SOFT_CONNECT       0x40
#define BF_UDC_USBCS_SOFT_CONNECT(v)    (((v) << 6) & 0x40)
#define BP_UDC_USBCS_SIGRESUME          5
#define BM_UDC_USBCS_SIGRESUME          0x20
#define BF_UDC_USBCS_SIGRESUME(v)       (((v) << 5) & 0x20)
#define BP_UDC_USBCS_USBSPEED           1
#define BM_UDC_USBCS_USBSPEED           0x2
#define BF_UDC_USBCS_USBSPEED(v)        (((v) << 1) & 0x2)
#define BP_UDC_USBCS_HCLSMODE           0
#define BM_UDC_USBCS_HCLSMODE           0x1
#define BF_UDC_USBCS_HCLSMODE(v)        (((v) << 0) & 0x1)

/**
 * Register: UDC_FIFOCTRL
 * Address: 0x1a8
 * SCT: no
 */
#define UDC_FIFOCTRL                    (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1a8))
#define BP_UDC_FIFOCTRL_DMA             0
#define BM_UDC_FIFOCTRL_DMA             0xffffffff
#define BF_UDC_FIFOCTRL_DMA(v)          (((v) << 0) & 0xffffffff)
#define BP_UDC_FIFOCTRL_CPU_ACCESS      7
#define BM_UDC_FIFOCTRL_CPU_ACCESS      0x80
#define BF_UDC_FIFOCTRL_CPU_ACCESS(v)   (((v) << 7) & 0x80)
#define BP_UDC_FIFOCTRL_DIR             4
#define BM_UDC_FIFOCTRL_DIR             0x10
#define BV_UDC_FIFOCTRL_DIR__OUT        0x0
#define BV_UDC_FIFOCTRL_DIR__IN         0x1
#define BF_UDC_FIFOCTRL_DIR(v)          (((v) << 4) & 0x10)
#define BF_UDC_FIFOCTRL_DIR_V(v)        ((BV_UDC_FIFOCTRL_DIR__##v << 4) & 0x10)
#define BP_UDC_FIFOCTRL_EP_NUM          0
#define BM_UDC_FIFOCTRL_EP_NUM          0x7
#define BF_UDC_FIFOCTRL_EP_NUM(v)       (((v) << 0) & 0x7)

/**
 * Register: UDC_OTGIRQ
 * Address: 0x1bc
 * SCT: no
 */
#define UDC_OTGIRQ                  (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1bc))
#define BP_UDC_OTGIRQ_PERIPH        4
#define BM_UDC_OTGIRQ_PERIPH        0x10
#define BF_UDC_OTGIRQ_PERIPH(v)     (((v) << 4) & 0x10)
#define BP_UDC_OTGIRQ_VBUSERR       3
#define BM_UDC_OTGIRQ_VBUSERR       0x8
#define BF_UDC_OTGIRQ_VBUSERR(v)    (((v) << 3) & 0x8)
#define BP_UDC_OTGIRQ_LOCSOFT       2
#define BM_UDC_OTGIRQ_LOCSOFT       0x4
#define BF_UDC_OTGIRQ_LOCSOFT(v)    (((v) << 2) & 0x4)
#define BP_UDC_OTGIRQ_SPRDET        1
#define BM_UDC_OTGIRQ_SPRDET        0x2
#define BF_UDC_OTGIRQ_SPRDET(v)     (((v) << 1) & 0x2)
#define BP_UDC_OTGIRQ_OTG_IDLE      0
#define BM_UDC_OTGIRQ_OTG_IDLE      0x1
#define BF_UDC_OTGIRQ_OTG_IDLE(v)   (((v) << 0) & 0x1)

/**
 * Register: UDC_OTGSTATUS
 * Address: 0x1bf
 * SCT: no
 */
#define UDC_OTGSTATUS   (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1bf))

/**
 * Register: UDC_OTGIEN
 * Address: 0x1c0
 * SCT: no
 * Description: OTG interrupt enable register
 */
#define UDC_OTGIEN  (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1c0))

/**
 * Register: UDC_HCMAXPCKL
 * Address: 0x1e2 0x3e4
 * SCT: no
 * Description: High speed max packed size LSB
 */
#define UDC_HCIN1MAXPCKL    (*(volatile unsigned char *)(REGS_UDC_BASE + 0x1e2))
#define UDC_HCOUT2MAXPCKL   (*(volatile unsigned char *)(REGS_UDC_BASE + 0x3e4))

/**
 * Register: UDC_STADDR
 * Address: 0x304 0x348
 * SCT: no
 * Description: Endpoint buffer start address
 */
#define UDC_OUT1STADDR  (*(volatile unsigned char *)(REGS_UDC_BASE + 0x304))
#define UDC_IN2STADDR   (*(volatile unsigned char *)(REGS_UDC_BASE + 0x348))

/**
 * Register: UDC_USBEIRQ
 * Address: 0x400
 * SCT: no
 * Description: USB extended irq register
 */
#define UDC_USBEIRQ                     (*(volatile unsigned char *)(REGS_UDC_BASE + 0x400))
#define BP_UDC_USBEIRQ_USB              7
#define BM_UDC_USBEIRQ_USB              0x80
#define BF_UDC_USBEIRQ_USB(v)           (((v) << 7) & 0x80)
#define BP_UDC_USBEIRQ_WAKEUP           6
#define BM_UDC_USBEIRQ_WAKEUP           0x40
#define BF_UDC_USBEIRQ_WAKEUP(v)        (((v) << 6) & 0x40)
#define BP_UDC_USBEIRQ_RESUME           5
#define BM_UDC_USBEIRQ_RESUME           0x20
#define BF_UDC_USBEIRQ_RESUME(v)        (((v) << 5) & 0x20)
#define BP_UDC_USBEIRQ_CONDISCON        4
#define BM_UDC_USBEIRQ_CONDISCON        0x10
#define BF_UDC_USBEIRQ_CONDISCON(v)     (((v) << 4) & 0x10)
#define BP_UDC_USBEIRQ_USBIEN           3
#define BM_UDC_USBEIRQ_USBIEN           0x8
#define BF_UDC_USBEIRQ_USBIEN(v)        (((v) << 3) & 0x8)
#define BP_UDC_USBEIRQ_WAKEUPIEN        2
#define BM_UDC_USBEIRQ_WAKEUPIEN        0x4
#define BF_UDC_USBEIRQ_WAKEUPIEN(v)     (((v) << 2) & 0x4)
#define BP_UDC_USBEIRQ_RESUMEIEN        1
#define BM_UDC_USBEIRQ_RESUMEIEN        0x2
#define BF_UDC_USBEIRQ_RESUMEIEN(v)     (((v) << 1) & 0x2)
#define BP_UDC_USBEIRQ_CONDISCONIEN     0
#define BM_UDC_USBEIRQ_CONDISCONIEN     0x1
#define BF_UDC_USBEIRQ_CONDISCONIEN(v)  (((v) << 0) & 0x1)

/**
 * Register: UDC_USBERST
 * Address: 0x404
 * SCT: no
 */
#define UDC_USBERST (*(volatile unsigned char *)(REGS_UDC_BASE + 0x404))

/**
 * Register: UDC_DMAEPSEL
 * Address: 0x40c
 * SCT: no
 */
#define UDC_DMAEPSEL                    (*(volatile unsigned char *)(REGS_UDC_BASE + 0x40c))
#define BP_UDC_DMAEPSEL_EP_SEL          0
#define BM_UDC_DMAEPSEL_EP_SEL          0xffffffff
#define BV_UDC_DMAEPSEL_EP_SEL__UNKNOWN 0x0
#define BV_UDC_DMAEPSEL_EP_SEL__EP1_IN  0x1
#define BV_UDC_DMAEPSEL_EP_SEL__EP1_OUT 0x3
#define BV_UDC_DMAEPSEL_EP_SEL__EP2_IN  0x4
#define BV_UDC_DMAEPSEL_EP_SEL__EP2_OUT 0xc
#define BF_UDC_DMAEPSEL_EP_SEL(v)       (((v) << 0) & 0xffffffff)
#define BF_UDC_DMAEPSEL_EP_SEL_V(v)     ((BV_UDC_DMAEPSEL_EP_SEL__##v << 0) & 0xffffffff)

#endif /* __HEADERGEN__ATJ213X__UDC__H__ */
